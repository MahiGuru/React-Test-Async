{"version":3,"sources":["components/Posts.js","actions/PostsListActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","newProps","newPost","posts","unshift","postData","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","console","log","fetch","then","res","json","data","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeInput","bind","assertThisInitialized","onSubmitClick","e","setState","defineProperty","target","name","value","newPosts","className","onChange","onClick","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_PostForm","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87492f6b.chunk.js","sourcesContent":["import React, { Component } from 'react' \r\nimport { fetchPosts } from '../actions/PostsListActions';\r\nimport {connect} from 'react-redux'; \r\n\r\nclass Posts extends Component {\r\n  componentWillMount(){\r\n    this.props.fetchPosts()\r\n  } \r\n  componentWillReceiveProps(newProps) {\r\n    if(newProps.newPost){\r\n      this.props.posts.unshift(newProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postData = this.props.posts.map((post) =>  (\r\n      <div key={post.id}>\r\n        <h1>{post.title}</h1>\r\n        <p>{post.body}</p>\r\n      </div>\r\n      )\r\n    )\r\n    return (\r\n      <div>\r\n        <h1> POSTS</h1>\r\n        {postData}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts); ","import {FETCH_POSTS, NEW_POST} from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    console.log(\"dispatched\");\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(res => res.json())\r\n      .then(data => dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: data\r\n      }));\r\n    \r\n}\r\n\r\nexport const newPosts = (postData) => dispatch => {\r\n    console.log(\"NEW CALLED\");\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => dispatch({\r\n          type: NEW_POST,\r\n          payload: data\r\n      }));\r\n    \r\n}\r\n","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';\r\n","import React, { Component } from 'react';\r\nimport { newPosts } from '../actions/PostsListActions';\r\nimport {connect} from 'react-redux'; \r\n\r\nclass PostForm extends Component {\r\n  static propTypes = { \r\n    \r\n  }\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          title : \"\",\r\n          body : ''\r\n      }\r\n      this.onChangeInput = this.onChangeInput.bind(this);\r\n      this.onSubmitClick = this.onSubmitClick.bind(this);\r\n  }\r\n  onChangeInput(e){ \r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onSubmitClick(e){ \r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    }\r\n\r\n    this.props.newPosts(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n            <label></label>\r\n            <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"row\">\r\n            <label></label>\r\n            <input type=\"text\" name=\"body\" value={this.state.body}  onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"row\">\r\n            <button onClick={this.onSubmitClick}>SUBMIT </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  post: state.posts.item\r\n})\r\n\r\nexport default connect(mapStateToProps, {newPosts})(PostForm);","import {FETCH_POSTS, NEW_POST} from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_POSTS:\r\n            console.log('reducer');\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_POST:\r\n            console.log(\"NEW POST\");\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import {combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n})","import {createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, \r\n    initialState, compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    ));\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/PostForm';\r\nimport store from './store'\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <PostForm></PostForm>\r\n          <Posts />\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}