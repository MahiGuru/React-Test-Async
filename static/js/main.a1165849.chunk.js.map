{"version":3,"sources":["components/Posts.js","actions/PostsListActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Posts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","keycloak","authenticated","fetchPosts","newProps","newPost","posts","unshift","_this2","Keycloak","console","log","init","onLoad","success","setState","error","err","xhr","postData","map","post","react_default","a","createElement","key","id","title","body","Component","connect","items","item","dispatch","fetch","then","res","json","data","type","payload","PostForm","onChangeInput","bind","assertThisInitialized","onSubmitClick","e","defineProperty","target","name","value","newPosts","className","onChange","onClick","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Login","loginBtnClick","loginBtnClickHandler","Fragment","App","es","react_router_dom","to","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1165849.chunk.js","sourcesContent":["import React, { Component } from 'react' \r\nimport { fetchPosts } from '../actions/PostsListActions';\r\nimport {connect} from 'react-redux'; \r\nimport Keycloak from 'keycloak-js';\r\n\r\nclass Posts extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = { keycloak: null, authenticated: false };\r\n  }\r\n  componentWillMount(){\r\n    this.props.fetchPosts()\r\n  } \r\n  componentWillReceiveProps(newProps) {\r\n    if(newProps.newPost){\r\n      this.props.posts.unshift(newProps.newPost);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const keycloak = Keycloak('/keycloak.json');\r\n    console.log(keycloak.init);\r\n    keycloak.init({onLoad: 'login-required'}).success(authenticated => {\r\n      this.setState({ keycloak: keycloak, authenticated: authenticated });\r\n      console.log(\"INSIDE SUCCESS\");\r\n    }).error((err,xhr) => {\r\n      console.log(err, xhr);\r\n    })\r\n  }\r\n  render() {\r\n    const postData = this.props.posts.map((post) =>  (\r\n      <div key={post.id}>\r\n        <h1>{post.title}</h1>\r\n        <p>{post.body}</p>\r\n      </div>\r\n      )\r\n    )\r\n\r\n    if(this.state.keycloak){\r\n      if(this.state.authenticated) {\r\n        return (\r\n          <div>\r\n              <div>This is keycloak served component </div>\r\n              <h1> POSTS</h1>\r\n              {postData}\r\n          </div>\r\n        )\r\n      }else{\r\n        return (<div> Unable to authenticate</div>)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div> Initializing keycloak</div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts); ","import {FETCH_POSTS, NEW_POST} from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    console.log(\"dispatched\");\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(res => res.json())\r\n      .then(data => dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: data\r\n      }));\r\n    \r\n}\r\n\r\nexport const newPosts = (postData) => dispatch => {\r\n    console.log(\"NEW CALLED\");\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => dispatch({\r\n          type: NEW_POST,\r\n          payload: data\r\n      }));\r\n    \r\n}\r\n","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';\r\n","import React, { Component } from 'react';\r\nimport { newPosts } from '../actions/PostsListActions';\r\nimport {connect} from 'react-redux'; \r\n\r\nclass PostForm extends Component {\r\n  static propTypes = { \r\n    \r\n  }\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          title : \"\",\r\n          body : ''\r\n      }\r\n      this.onChangeInput = this.onChangeInput.bind(this);\r\n      this.onSubmitClick = this.onSubmitClick.bind(this);\r\n  }\r\n  onChangeInput(e){ \r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onSubmitClick(e){ \r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    }\r\n\r\n    this.props.newPosts(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n            <label></label>\r\n            <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"row\">\r\n            <label></label>\r\n            <input type=\"text\" name=\"body\" value={this.state.body}  onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"row\">\r\n            <button onClick={this.onSubmitClick}>SUBMIT </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  post: state.posts.item\r\n})\r\n\r\nexport default connect(mapStateToProps, {newPosts})(PostForm);","import {FETCH_POSTS, NEW_POST} from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_POSTS:\r\n            console.log('reducer');\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_POST:\r\n            console.log(\"NEW POST\");\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import {combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n})","import {createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, \r\n    initialState, compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    ));\r\n\r\nexport default store;","import React, { Component } from 'react' \r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  };\r\n        this.loginBtnClick = this.loginBtnClickHandler.bind(this);\r\n    }\r\n    loginBtnClickHandler(){\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Login</h1>\r\n                <button onClick={this.loginBtnClick}>LOGIN </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/PostForm';\r\nimport store from './store';\r\nimport Login from './components/Login';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div  className=\"App\">\r\n            <nav>\r\n              <ul className=\"menu-list\">\r\n                <li>\r\n                  <Link to=\"/posts\">Dashboard</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to=\"/create/\">Create Post</Link>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n\r\n            <Route path=\"/\" exact component={Login} />\r\n            <Route path=\"/posts\" exact component={Posts} />\r\n            <Route path=\"/create/\" component={PostForm} />\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}